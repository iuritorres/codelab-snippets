{
  // ES6+ Functions
  "Arrow Function with Block": {
    "prefix": "af",
    "description": "Create arrow function with curly braces block",
    "body": ["const ${1:functionName} = (${2:params}) => {", "  $0", "};"]
  },
  "Arrow Function Inline": {
    "prefix": "afi",
    "description": "Create inline arrow function (single expression)",
    "body": ["const ${1:functionName} = (${2:params}) => $0;"]
  },
  "Async Arrow Function": {
    "prefix": "aaf",
    "description": "Create async arrow function for asynchronous operations",
    "body": ["const ${1:functionName} = async (${2:params}) => {", "  $0", "};"]
  },

  // ES6+ Variables
  "Const Variable Declaration": {
    "prefix": "co",
    "description": "Declare a constant variable (immutable reference)",
    "body": ["const ${1:name} = $0;"]
  },
  "Let Variable Declaration": {
    "prefix": "le",
    "description": "Declare a block-scoped variable (mutable)",
    "body": ["let ${1:name} = $0;"]
  },

  // Destructuring
  "Object Destructuring": {
    "prefix": "dob",
    "description": "Extract properties from object using destructuring",
    "body": ["const { ${1:property} } = ${2:object};"]
  },
  "Array Destructuring": {
    "prefix": "dar",
    "description": "Extract elements from array using destructuring",
    "body": ["const [${1:element}] = ${2:array};"]
  },
  "Object Destructuring with Rest": {
    "prefix": "drest",
    "description": "Destructure object with rest operator (...)",
    "body": ["const { ${1:first}, ...${2:rest} } = ${3:object};"]
  },

  // Template Literals
  "Template Literal String": {
    "prefix": "tl",
    "description": "Create template literal with embedded expressions",
    "body": ["`${1:string} \\${${2:expression}} ${3:string}`$0"]
  },

  // Promises and Async/Await
  "Promise Constructor": {
    "prefix": "prom",
    "description": "Create new Promise with resolve/reject handlers",
    "body": ["new Promise((resolve, reject) => {", "  $0", "});"]
  },
  "Async Function Declaration": {
    "prefix": "asf",
    "description": "Create async function for asynchronous operations",
    "body": ["async function ${1:functionName}(${2:params}) {", "  $0", "}"]
  },
  "Try-Catch Block": {
    "prefix": "trycatch",
    "description": "Try-catch block for error handling (async/await ready)",
    "body": [
      "try {",
      "  ${1:code}",
      "  $0",
      "} catch (error) {",
      "  console.error(error);",
      "}"
    ]
  },

  // Array Methods
  "Array Map Method": {
    "prefix": "map",
    "description": "Transform array elements using map method",
    "body": ["${1:array}.map((${2:item}) => ${3:item})"]
  },
  "Array Filter Method": {
    "prefix": "filter",
    "description": "Filter array elements based on condition",
    "body": ["${1:array}.filter((${2:item}) => ${3:condition})"]
  },
  "Array Reduce Method": {
    "prefix": "reduce",
    "description": "Reduce array to single value using accumulator",
    "body": [
      "${1:array}.reduce((${2:acc}, ${3:item}) => {",
      "  $0",
      "  return ${2:acc};",
      "}, ${4:initialValue})"
    ]
  },
  "Array Find Method": {
    "prefix": "find",
    "description": "Find first array element matching condition",
    "body": ["${1:array}.find((${2:item}) => ${3:condition})"]
  },
  "Array ForEach Method": {
    "prefix": "foreach",
    "description": "Execute function for each array element",
    "body": ["${1:array}.forEach((${2:item}) => {", "  $0", "});"]
  },

  // Object Methods
  "Object Keys Array": {
    "prefix": "okeys",
    "description": "Get array of object's property names",
    "body": ["Object.keys(${1:object})"]
  },
  "Object Values Array": {
    "prefix": "ovalues",
    "description": "Get array of object's property values",
    "body": ["Object.values(${1:object})"]
  },
  "Object Entries Array": {
    "prefix": "oentries",
    "description": "Get array of object's [key, value] pairs",
    "body": ["Object.entries(${1:object})"]
  },

  // JSON Operations
  "JSON Stringify Formatted": {
    "prefix": "stringify",
    "description": "Convert object to formatted JSON string with 2-space indentation",
    "body": ["JSON.stringify(${1:object}, null, 2)"]
  },
  "JSON Parse": {
    "prefix": "parse",
    "description": "Parse JSON string into JavaScript object",
    "body": ["JSON.parse(${1:jsonString})"]
  },

  // Import/Export
  "Import Default Export": {
    "prefix": "imp",
    "description": "Import default export from module",
    "body": ["import ${1:name} from '${2:module}';"]
  },
  "Import Named Exports": {
    "prefix": "imn",
    "description": "Import specific named exports from module",
    "body": ["import { ${1:name} } from '${2:module}';"]
  },
  "Import All as Namespace": {
    "prefix": "ima",
    "description": "Import all exports as namespace object",
    "body": ["import * as ${1:name} from '${2:module}';"]
  },
  "Export Default Value": {
    "prefix": "exp",
    "description": "Export value as default export",
    "body": ["export default ${1:name};"]
  },
  "Export Named Values": {
    "prefix": "exn",
    "description": "Export specific named values from module",
    "body": ["export { ${1:name} };"]
  },

  // Console
  "Console Log Output": {
    "prefix": "cl",
    "description": "Log values to browser console",
    "body": ["console.log($0);"]
  },
  "Console Warning": {
    "prefix": "cw",
    "description": "Display warning message in console",
    "body": ["console.warn($0);"]
  },
  "Console Error Message": {
    "prefix": "ce",
    "description": "Display error message in console",
    "body": ["console.error($0);"]
  },
  "Console Table Display": {
    "prefix": "ctable",
    "description": "Display data in table format in console",
    "body": ["console.table($0);"]
  },
  "Console Clear Screen": {
    "prefix": "cclear",
    "description": "Clear all console output",
    "body": ["console.clear();"]
  },
  "Console Assert Condition": {
    "prefix": "cassert",
    "description": "Assert condition and log error if false",
    "body": ["console.assert(${1:condition}, '${2:message}');"]
  },
  "Console Time Measurement": {
    "prefix": "ctime",
    "description": "Measure execution time between start and end",
    "body": [
      "console.time('${1:label}');",
      "$0",
      "console.timeEnd('${1:label}');"
    ]
  },
  "Console Group Collapsible": {
    "prefix": "cgroup",
    "description": "Create collapsible group of console logs",
    "body": ["console.group('${1:label}');", "$0", "console.groupEnd();"]
  }
}
