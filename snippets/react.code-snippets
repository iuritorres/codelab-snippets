{
  // React Function Components
  "Function Component (Basic)": {
    "prefix": "rfc",
    "description": "Create basic React function component (not exported)",
    "body": [
      "function ${1:ComponentName} () {",
      "  return (",
      "    $0",
      "  );",
      "};"
    ]
  },
  "Function Component (Exported)": {
    "prefix": "erfc",
    "description": "Create exported React function component",
    "body": [
      "export function ${1:ComponentName} () {",
      "  return (",
      "    $0",
      "  );",
      "};"
    ]
  },
  "Function Component (Default Export)": {
    "prefix": "edrfc",
    "description": "Create React function component with default export",
    "body": [
      "function ${1:ComponentName} () {",
      "  return (",
      "    $0",
      "  );",
      "};",
      "",
      "export default ${1:ComponentName};"
    ]
  },

  // React Arrow Function Components
  "Arrow Component (Basic)": {
    "prefix": "rafc",
    "description": "Create basic React arrow function component (not exported)",
    "body": [
      "const ${1:ComponentName} = () => {",
      "  return (",
      "    $0",
      "  );",
      "};"
    ]
  },
  "Arrow Component (Exported)": {
    "prefix": "erafc",
    "description": "Create exported React arrow function component",
    "body": [
      "export const ${1:ComponentName} = () => {",
      "  return (",
      "    $0",
      "  );",
      "};"
    ]
  },
  "Arrow Component (Default Export)": {
    "prefix": "edrafc",
    "description": "Create React arrow function component with default export",
    "body": [
      "const ${1:ComponentName} = () => {",
      "  return (",
      "    $0",
      "  );",
      "};",
      "",
      "export default ${1:ComponentName};"
    ]
  },

  // React Components with Props
  "Function Component with Props": {
    "prefix": "rfcp",
    "description": "Create React function component with TypeScript props interface",
    "body": [
      "interface ${1:ComponentName}Props {",
      "  ",
      "}",
      "",
      "function ${1:ComponentName}({  }: ${1:ComponentName}Props) {",
      "  return (",
      "    $0",
      "  );",
      "};"
    ]
  },
  "Function Component with Props (Exported)": {
    "prefix": "erfcp",
    "description": "Create exported React function component with TypeScript props",
    "body": [
      "interface ${1:ComponentName}Props {",
      "  ",
      "}",
      "",
      "export function ${1:ComponentName}({  }: ${1:ComponentName}Props) {",
      "  return (",
      "    $0",
      "  );",
      "};"
    ]
  },
  "Function Component with Props (Default Export)": {
    "prefix": "edrfcp",
    "description": "Create React function component with props and default export",
    "body": [
      "interface ${1:ComponentName}Props {",
      "  ",
      "}",
      "",
      "function ${1:ComponentName}({  }: ${1:ComponentName}Props) {",
      "  return (",
      "    $0",
      "  );",
      "};",
      "",
      "export default ${1:ComponentName};"
    ]
  },
  "Arrow Component with Props": {
    "prefix": "rafcp",
    "description": "Create React arrow function component with TypeScript props",
    "body": [
      "interface ${1:ComponentName}Props {",
      "  ",
      "}",
      "",
      "const ${1:ComponentName} = ({  }: ${1:ComponentName}Props) => {",
      "  return (",
      "    $0",
      "  );",
      "};"
    ]
  },
  "Arrow Component with Props (Exported)": {
    "prefix": "erafcp",
    "description": "Create exported React arrow component with TypeScript props",
    "body": [
      "interface ${1:ComponentName}Props {",
      "  ",
      "}",
      "",
      "export const ${1:ComponentName} = ({  }: ${1:ComponentName}Props) => {",
      "  return (",
      "    $0",
      "  );",
      "};"
    ]
  },
  "Arrow Component with Props (Default Export)": {
    "prefix": "edrafcp",
    "description": "Create React arrow component with props and default export",
    "body": [
      "interface ${1:ComponentName}Props {",
      "  ",
      "}",
      "",
      "const ${1:ComponentName} = ({  }: ${1:ComponentName}Props) => {",
      "  return (",
      "    $0",
      "  );",
      "};",
      "",
      "export default ${1:ComponentName};"
    ]
  },

  // Concise React Components with Props
  "Component with Props (Concise Function)": {
    "prefix": "rcp",
    "description": "Create concise React component with pre-filled props",
    "body": [
      "interface ${1:Component}Props {",
      "  ${2:prop}: ${3:string};",
      "}",
      "",
      "function ${1:Component}(props: ${1:Component}Props) {",
      "  return (",
      "    $0",
      "  );",
      "};"
    ]
  },
  "Component with Props (Concise Arrow)": {
    "prefix": "racp",
    "description": "Create concise React arrow component with inline JSX",
    "body": [
      "interface ${1:Component}Props {",
      "  ${2:prop}: ${3:string};",
      "}",
      "",
      "const ${1:Component} = (props: ${1:Component}Props) => <${4:div}>$0</${4:div}>;"
    ]
  },
  "Component with Props (Concise Exported)": {
    "prefix": "ercp",
    "description": "Create concise exported React component with destructured props",
    "body": [
      "interface ${1:Component}Props {",
      "  ${2:prop}: ${3:string};",
      "}",
      "",
      "export const ${1:Component} = ({ ${2:prop} }: ${1:Component}Props) => (",
      "  <${4:div}>$0</${4:div}>",
      ");"
    ]
  },

  // Quick Props Interface
  "Props Interface Definition": {
    "prefix": "iprops",
    "description": "Create TypeScript interface for component props",
    "body": ["interface ${1:ComponentName}Props {", "  $0", "}"]
  },
  "Props Type Definition": {
    "prefix": "tprops",
    "description": "Create TypeScript type alias for component props",
    "body": ["type ${1:ComponentName}Props = {", "  $0", "};"]
  },
  "Inline Props Component": {
    "prefix": "ricp",
    "description": "Create React component with inline props type definition",
    "body": [
      "const ${1:Component} = ({ ${2:prop} }: { ${2:prop}: ${3:string} }) => <${4:div}>$0</${4:div}>;"
    ]
  },

  // React Hooks
  "useState Hook": {
    "prefix": "state",
    "description": "Create state variable with setter using useState hook",
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initialValue});"
    ]
  },
  "useEffect Hook": {
    "prefix": "effect",
    "description": "Create effect hook that runs once on component mount",
    "body": ["useEffect(() => {", "  $0", "}, []);"]
  },
  "useEffect with Dependencies": {
    "prefix": "effectd",
    "description": "Create effect hook with dependency array",
    "body": ["useEffect(() => {", "  $0", "}, [${1:dependencies}]);"]
  },
  "useEffect with Cleanup": {
    "prefix": "effectc",
    "description": "Create effect hook with cleanup function for unmount",
    "body": [
      "useEffect(() => {",
      "  $0",
      "  ",
      "  return () => {",
      "    ${1:// cleanup}",
      "  };",
      "}, []);"
    ]
  },
  "useContext Hook": {
    "prefix": "context",
    "description": "Access React context value using useContext hook",
    "body": ["const ${1:value} = useContext(${2:Context});"]
  },
  "useReducer Hook": {
    "prefix": "reducer",
    "description": "Create state management with reducer pattern",
    "body": [
      "const [${1:state}, ${2:dispatch}] = useReducer(${3:reducer}, ${4:initialState});"
    ]
  },
  "useMemo Hook": {
    "prefix": "memo",
    "description": "Memoize expensive computation with useMemo hook",
    "body": [
      "const ${1:memoizedValue} = useMemo(() => {",
      "  return ${2:computation};",
      "}, [${3:dependencies}]);"
    ]
  },
  "useCallback Hook": {
    "prefix": "callback",
    "description": "Memoize function with useCallback hook",
    "body": [
      "const ${1:memoizedCallback} = useCallback(",
      "  (${2:params}) => {",
      "    $0",
      "  },",
      "  [${3:dependencies}]",
      ");"
    ]
  },
  "useRef Hook": {
    "prefix": "ref",
    "description": "Create mutable ref object with useRef hook",
    "body": ["const ${1:ref} = useRef${2:<${3:HTMLDivElement}>}(${4:null});"]
  },
  "useLayoutEffect Hook": {
    "prefix": "leffect",
    "description": "Create layout effect hook (runs synchronously after DOM mutations)",
    "body": ["useLayoutEffect(() => {", "  $0", "}, [${1:dependencies}]);"]
  },
  "useImperativeHandle Hook": {
    "prefix": "imperative",
    "description": "Customize instance value exposed by ref with useImperativeHandle",
    "body": [
      "useImperativeHandle(${1:ref}, () => ({",
      "  $0",
      "}), [${2:dependencies}]);"
    ]
  },
  "useDebugValue Hook": {
    "prefix": "usedebug",
    "description": "Display label for custom hook in React DevTools",
    "body": ["useDebugValue(${1:value});"]
  },

  // Custom Hooks
  "Custom Hook Template": {
    "prefix": "hook",
    "description": "Create custom React hook with state and effect",
    "body": [
      "function use${1:CustomHook}(${2:params}) {",
      "  const [${3:state}, set${3/(.*)/${1:/capitalize}/}] = useState(${4:initialValue});",
      "  ",
      "  useEffect(() => {",
      "    $0",
      "  }, [${2:params}]);",
      "  ",
      "  return { ${3:state}, set${3/(.*)/${1:/capitalize}/} };",
      "}"
    ]
  },
  "Custom Hook with Return Object": {
    "prefix": "hookr",
    "description": "Create custom React hook with flexible return object",
    "body": [
      "function use${1:CustomHook}(${2:params}) {",
      "  $0",
      "  ",
      "  return {",
      "    ${3:// return values}",
      "  };",
      "}"
    ]
  },

  // Hook Patterns
  "useState with TypeScript": {
    "prefix": "statets",
    "description": "Create typed state with explicit TypeScript interface",
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState<${2:Type}>(${3:initialValue});"
    ]
  },
  "useEffect Async Pattern": {
    "prefix": "effecta",
    "description": "Create effect hook with async function and error handling",
    "body": [
      "useEffect(() => {",
      "  const ${1:fetchData} = async () => {",
      "    try {",
      "      $0",
      "    } catch (error) {",
      "      console.error(error);",
      "    }",
      "  };",
      "  ",
      "  ${1:fetchData}();",
      "}, [${2:dependencies}]);"
    ]
  },
  "Form State Management Hook": {
    "prefix": "formhook",
    "description": "Create form state hook with input change handler",
    "body": [
      "const [${1:formData}, set${1/(.*)/${1:/capitalize}/}] = useState({",
      "  ${2:field}: '${3:value}',",
      "});",
      "",
      "const handle${4:Change} = (e: React.ChangeEvent<HTMLInputElement>) => {",
      "  const { name, value } = e.target;",
      "  set${1/(.*)/${1:/capitalize}/}(prev => ({",
      "    ...prev,",
      "    [name]: value",
      "  }));",
      "};"
    ]
  }
}
